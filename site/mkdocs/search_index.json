{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to PWA Builder Docs",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-pwa-builder-docs",
            "text": "",
            "title": "Welcome to PWA Builder Docs"
        },
        {
            "location": "/quickstart/quick-start-polyfills/",
            "text": "",
            "title": "Quick start polyfills"
        },
        {
            "location": "/quickstart/quick-start-pwa-on-website/",
            "text": "",
            "title": "Quick start pwa on website"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/",
            "text": "Quick Start PWA using CLI tools\n\n\nThis quick start walks you through the steps to create a Progressive Web App (PWA) from scratch using the \npwabuilder CLI Tools\n. Make sure you meet the \nminimum requirements\n.\n\n\nThe first step is to build the Manifest for your application using the \npwabuilder CLI Tools\n. The builder will search in the home page of your site looking for information about the app in specific meta tags. For more information, read \nWhat is a Manifest\n.\n\n\nManifest\n\n\nThe Manifest for Web Apps is a JSON-based manifest file that provides a centralized place to put metadata associated with a web application (like app name, icons, presentation, etc.), thus solving the problem of having to maintain an heterogeneous set of meta tags and link tags to support each platform. PWAs use this manifest to control the appearance and behavior of the app when it is installed and launched from the user device. For more details see the Web App Manifest Specification.\n\n\nInstall the Tools\n\n\nBefore installing \npwabuilder CLI Tools\n, you must first install \nNode.js\n (version 0.12.0 or later).\n\n\n\n\n\n\nOpen a command prompt or terminal window and type the following command:  \n\n\nnpm install pwabuilder -g\n\n\n\n\n\n\nGenerate Manifest\n\n\nThe \npwabuilder CLI Tools\n will search in the home page of your site looking for an existing manifest. If not, it will gather information about the app in specific meta tags or propose default values for the manifest properties. It will also show any warnings or suggestions to address potential issues in the collected metadata. Make sure you address any warnings before you move on.\n\n\nUsage:\n\n\npwabuilder <website-url> [options]\n\n\nExample:\n\n\npwabuilder https://btdj.azurewebsites.net/ -d C:\\Projects -l debug -p windows10,android\n\n\n\n\nService Workers\n\n\nDuring this step you will choose functionalities you want to add to your app. You will include code to use sample service workers implementing those features from a repository. Learn more about service workers \nhere\n.\n\n\nBuild Service Worker\n\n\n\n\nOpen a browser and navigate to the \nserviceworkers\n repository\n\n\nIn this repository you will find sample code of service workers implementing the following features:\n\n\nOffline page (location: \n/ServiceWorker1\n folder)\n\n\nOffline copy of pages (location: \n/ServiceWorker2\n folder)\n\n\nCombination of offline page + offline copy of pages (location: \n/ServiceWorker3\n folder)\n\n\n\n\n\n\nDownload the service worker files including the code for your website and the service worker code\n\n\npwabuilder-sw-register.js registers the service worker for the website\n\n\npwabuilder-sw.js is the service worker's code\n\n\n\n\n\n\nThe code for your website should be included in your HTML to register the service worker\n\n\n\n\n\n\n\n\nUpload the service worker code JS file to the web site\n\n\n\n\n\n\nPublishing\n\n\nPublishing your Progressive Web App is mainly a matter of adding the W3C manifest file and service worker scripts to your website. These assets are then referenced from your website, both with a link tag reference to the manifest file and the service worker registration scripts.\n\n\nWeb\n\n\n\n\nThis is still a web app, so step one is to include these new files into your web site. You can grab file created in the \nGenerate Manifest\n step and the script files in the \nBuild Service Worker\n step\n\n\nAdd and upload them to your website. Different browsers will detect your Progressive Web App in different ways, but the \nmanifest\n and \nservice workers\n are required for each of them. \n\n\nThe Web App Manifest is deployed in your HTML pages using a \nlink\n tag in the head of your document: \n<link rel=\"manifest\" href=\"/manifest.json\">\n.\n\n\nAlso, add and upload references \nimages\n and \nservice worker\n files to the root path of the site.\n\n\n\n\n\n\n\n\nWindows\n\n\nWindows 10 PWA support is still in Beta, so some features like service workers will not work on all user machines. Your PWA can be created and app listing generated for supported platforms (using the -p option, in this case windows10).\n\n\nExample:\n\n\npwabuilder package C:\\Projects\\HotBeats -p windows10 -a -l debug\n\n\n\n\nAndroid\n\n\nPublishing directly to the Android Play Store will be coming soon.\n\n\nOther\n\n\nYou can now generate the polyfill packages to publish both Android and iOS. You'll need Xcode to build and submit your package to the Store.\n\n\nPolyfills\n\n\nGiven that not every platform or browser runs PWAs yet, the builder provides polyfills for platforms that lack support like \niOS\n, \nMac\n and \nWindows 7\n.\nIn case of Android, PWAs are available through the browser; however, you can generate an \nAndroid\n polyfill app that can be also submitted to the Play store.\n\n\nAndroid\n\n\n\n\nIn case you haven't done in the previous step, you can generate the polyfills for Android executing: \npwabuilder https://btdj.azurewebsites.net/ -p android\n\n\nThen, follow the \ninstructions\n to publish your Android app.\n\n\n\n\niOS\n\n\n\n\nIn case you haven't done in the previous step, you can generate the polyfills for iOS executing: \npwabuilder https://btdj.azurewebsites.net/ -p ios\n\n\nThen, follow the \ninstructions\n to publish your Android app.\n\n\n\n\nMacOS\n\n\n\n\nFollow the \ninstructions\n to publish your MacOS app.\n\n\n\n\nWindows 7\n\n\n\n\nFollow the \ninstructions\n to publish your Windows 7 app.",
            "title": "Quick start pwa using cli tools"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#quick-start-pwa-using-cli-tools",
            "text": "This quick start walks you through the steps to create a Progressive Web App (PWA) from scratch using the  pwabuilder CLI Tools . Make sure you meet the  minimum requirements .  The first step is to build the Manifest for your application using the  pwabuilder CLI Tools . The builder will search in the home page of your site looking for information about the app in specific meta tags. For more information, read  What is a Manifest .",
            "title": "Quick Start PWA using CLI tools"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#manifest",
            "text": "The Manifest for Web Apps is a JSON-based manifest file that provides a centralized place to put metadata associated with a web application (like app name, icons, presentation, etc.), thus solving the problem of having to maintain an heterogeneous set of meta tags and link tags to support each platform. PWAs use this manifest to control the appearance and behavior of the app when it is installed and launched from the user device. For more details see the Web App Manifest Specification.",
            "title": "Manifest"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#install-the-tools",
            "text": "Before installing  pwabuilder CLI Tools , you must first install  Node.js  (version 0.12.0 or later).    Open a command prompt or terminal window and type the following command:    npm install pwabuilder -g",
            "title": "Install the Tools"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#generate-manifest",
            "text": "The  pwabuilder CLI Tools  will search in the home page of your site looking for an existing manifest. If not, it will gather information about the app in specific meta tags or propose default values for the manifest properties. It will also show any warnings or suggestions to address potential issues in the collected metadata. Make sure you address any warnings before you move on.  Usage:  pwabuilder <website-url> [options]  Example:  pwabuilder https://btdj.azurewebsites.net/ -d C:\\Projects -l debug -p windows10,android",
            "title": "Generate Manifest"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#service-workers",
            "text": "During this step you will choose functionalities you want to add to your app. You will include code to use sample service workers implementing those features from a repository. Learn more about service workers  here .",
            "title": "Service Workers"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#build-service-worker",
            "text": "Open a browser and navigate to the  serviceworkers  repository  In this repository you will find sample code of service workers implementing the following features:  Offline page (location:  /ServiceWorker1  folder)  Offline copy of pages (location:  /ServiceWorker2  folder)  Combination of offline page + offline copy of pages (location:  /ServiceWorker3  folder)    Download the service worker files including the code for your website and the service worker code  pwabuilder-sw-register.js registers the service worker for the website  pwabuilder-sw.js is the service worker's code    The code for your website should be included in your HTML to register the service worker     Upload the service worker code JS file to the web site",
            "title": "Build Service Worker"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#publishing",
            "text": "Publishing your Progressive Web App is mainly a matter of adding the W3C manifest file and service worker scripts to your website. These assets are then referenced from your website, both with a link tag reference to the manifest file and the service worker registration scripts.",
            "title": "Publishing"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#web",
            "text": "This is still a web app, so step one is to include these new files into your web site. You can grab file created in the  Generate Manifest  step and the script files in the  Build Service Worker  step  Add and upload them to your website. Different browsers will detect your Progressive Web App in different ways, but the  manifest  and  service workers  are required for each of them.   The Web App Manifest is deployed in your HTML pages using a  link  tag in the head of your document:  <link rel=\"manifest\" href=\"/manifest.json\"> .  Also, add and upload references  images  and  service worker  files to the root path of the site.",
            "title": "Web"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#windows",
            "text": "Windows 10 PWA support is still in Beta, so some features like service workers will not work on all user machines. Your PWA can be created and app listing generated for supported platforms (using the -p option, in this case windows10).  Example:  pwabuilder package C:\\Projects\\HotBeats -p windows10 -a -l debug",
            "title": "Windows"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#android",
            "text": "Publishing directly to the Android Play Store will be coming soon.",
            "title": "Android"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#other",
            "text": "You can now generate the polyfill packages to publish both Android and iOS. You'll need Xcode to build and submit your package to the Store.",
            "title": "Other"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#polyfills",
            "text": "Given that not every platform or browser runs PWAs yet, the builder provides polyfills for platforms that lack support like  iOS ,  Mac  and  Windows 7 .\nIn case of Android, PWAs are available through the browser; however, you can generate an  Android  polyfill app that can be also submitted to the Play store.",
            "title": "Polyfills"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#android_1",
            "text": "In case you haven't done in the previous step, you can generate the polyfills for Android executing:  pwabuilder https://btdj.azurewebsites.net/ -p android  Then, follow the  instructions  to publish your Android app.",
            "title": "Android"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#ios",
            "text": "In case you haven't done in the previous step, you can generate the polyfills for iOS executing:  pwabuilder https://btdj.azurewebsites.net/ -p ios  Then, follow the  instructions  to publish your Android app.",
            "title": "iOS"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#macos",
            "text": "Follow the  instructions  to publish your MacOS app.",
            "title": "MacOS"
        },
        {
            "location": "/quickstart/quick-start-pwa-using-cli-tools/#windows-7",
            "text": "Follow the  instructions  to publish your Windows 7 app.",
            "title": "Windows 7"
        },
        {
            "location": "/quickstart/quick-start-windows10-publishing/",
            "text": "Quick Start Windows 10 Publishing\n\n\nPublishing your Progressive Web App is mainly a matter of adding the W3C manifest file and service worker scripts to your website. These assets are then referenced from your website, both with a link tag reference to the manifest file and the service worker registration scripts.\n\n\nWindows 10 PWA support is still in Beta, so some features like service workers will not work on all user machines. \n\n\nPublish through website\n\n\nYour PWA can be created and app listing generated from the below one step publishing button.\n\n\n\n\nClick \nPublish 1-step\n button under the Windows panel\n\n\n\n\nEnter the user name or company name and a valid email address\n\n\n\n\n\n\n\n\nClick \nSubmit\n.\n\n\n\n\n\n\nPublish via CLI\n\n\nYour PWA can be created and app listing generated for supported platforms (using the -p option, in this case windows10).\n\n\nExample:\n\n\npwabuilder package C:\\Projects\\HotBeats -p windows10 -a -l debug",
            "title": "Quick start windows10 publishing"
        },
        {
            "location": "/quickstart/quick-start-windows10-publishing/#quick-start-windows-10-publishing",
            "text": "Publishing your Progressive Web App is mainly a matter of adding the W3C manifest file and service worker scripts to your website. These assets are then referenced from your website, both with a link tag reference to the manifest file and the service worker registration scripts.  Windows 10 PWA support is still in Beta, so some features like service workers will not work on all user machines.",
            "title": "Quick Start Windows 10 Publishing"
        },
        {
            "location": "/quickstart/quick-start-windows10-publishing/#publish-through-website",
            "text": "Your PWA can be created and app listing generated from the below one step publishing button.   Click  Publish 1-step  button under the Windows panel   Enter the user name or company name and a valid email address     Click  Submit .",
            "title": "Publish through website"
        },
        {
            "location": "/quickstart/quick-start-windows10-publishing/#publish-via-cli",
            "text": "Your PWA can be created and app listing generated for supported platforms (using the -p option, in this case windows10).  Example:  pwabuilder package C:\\Projects\\HotBeats -p windows10 -a -l debug",
            "title": "Publish via CLI"
        },
        {
            "location": "/quickstart/quickstart/",
            "text": "",
            "title": "Quickstart"
        },
        {
            "location": "/tools/how-to-package-android/",
            "text": "How to Package Android\n\n\n\n\n\n\nIn the \nPublish PWA\n step of the builder wizard, locate the \nAndroid\n section and click the \nDownload\n button. The app package will be generated and downloaded to your local drive.\n\n\n\n2. Extract the package into a local folder\n3. Open the project in Android Studio\n1. Download and install the \nJava SDK\n\n2. \nDownload\n and install Android Studio and the Android SDK\n3. Open Android Studio and select the \nImport project\n option. Select the folder \nprojects/Polyfills/cordova/platforms/android\n and click \nOK\n.\n\n\n**Note:** The version of Gradle installed by Android studio might not be compatible with the project's Gradle configuration. If that is the case, Android Studio will show an error and provide an option to fix/upgrade the project.\n\n\n\n\n\nTest the project\n\n\nIn Android Studio, select \nRun > Run\n in the menu bar to build and run the app\n\n\nIf it is the first time running the app, Android Studio asks to select a deployment target. Select a device or emulator to install and run the app\n\n\n\n\n\n\n\n\nBuild the project\n\n\n\n\nSelect the build variant (debug|release) from the \nBuild Variants\n window\n\n\n\n\nIn Android Studio, select \nBuild > Build APK\n in the menu bar. The APKs are saved in \nprojects/Polyfills/cordova/platforms/android/build/outputs/apk/\n\n\nNote:\n\u00a0Before you can generate a release version of your app for public distribution, you must\u00a0\nsign your APK\n\n6. Submit the app to the Store\n    1. Go to the \nGoogle Play Developer Console\n\n    2. Follow the steps to:\n1. Setup an Android Developer account\n2. Reserve a name for your app\n3. Upload your app package",
            "title": "How to package android"
        },
        {
            "location": "/tools/how-to-package-android/#how-to-package-android",
            "text": "In the  Publish PWA  step of the builder wizard, locate the  Android  section and click the  Download  button. The app package will be generated and downloaded to your local drive.  \n2. Extract the package into a local folder\n3. Open the project in Android Studio\n1. Download and install the  Java SDK \n2.  Download  and install Android Studio and the Android SDK\n3. Open Android Studio and select the  Import project  option. Select the folder  projects/Polyfills/cordova/platforms/android  and click  OK .  **Note:** The version of Gradle installed by Android studio might not be compatible with the project's Gradle configuration. If that is the case, Android Studio will show an error and provide an option to fix/upgrade the project.   Test the project  In Android Studio, select  Run > Run  in the menu bar to build and run the app  If it is the first time running the app, Android Studio asks to select a deployment target. Select a device or emulator to install and run the app     Build the project   Select the build variant (debug|release) from the  Build Variants  window   In Android Studio, select  Build > Build APK  in the menu bar. The APKs are saved in  projects/Polyfills/cordova/platforms/android/build/outputs/apk/  Note: \u00a0Before you can generate a release version of your app for public distribution, you must\u00a0 sign your APK \n6. Submit the app to the Store\n    1. Go to the  Google Play Developer Console \n    2. Follow the steps to:\n1. Setup an Android Developer account\n2. Reserve a name for your app\n3. Upload your app package",
            "title": "How to Package Android"
        },
        {
            "location": "/tools/how-to-package-ios/",
            "text": "How to Package iOS\n\n\n\n\n\n\nIn the Publish PWA step of the builder wizard, locate the iOS Polyfill section and click the Download button. The app package will be generated and downloaded to your local drive.\n\n\n\n\n\n\n\n\nExtract the package into a local folder\n\n\n\n\nYou'll need to download and install \nXcode\n\n\nThen, you can follow the\n Submitting Your App to the Store\n steps in the Apple's App Distribution Guide.",
            "title": "How to package ios"
        },
        {
            "location": "/tools/how-to-package-ios/#how-to-package-ios",
            "text": "In the Publish PWA step of the builder wizard, locate the iOS Polyfill section and click the Download button. The app package will be generated and downloaded to your local drive.     Extract the package into a local folder   You'll need to download and install  Xcode  Then, you can follow the  Submitting Your App to the Store  steps in the Apple's App Distribution Guide.",
            "title": "How to Package iOS"
        },
        {
            "location": "/tools/how-to-package-mac/",
            "text": "How to Package MacOS\n\n\nMacOS is supported in the \nmacOS platform module\n for pwabuilder.\n\n\n\n\nMake sure \npwabuilder\n installed. If not, install using: \n\n\n\n\nnpm install -g pwabuilder\n\n\n\n\nAdd \nmacOS platform\n by:\n\n\n\n\npwabuilder platform add mac pwabuilder-mac\n\n\n\n\nThen, use pwabuilder to generate the polyfills: \n\n\n\n\npwabuilder https://btdj.azurewebsites.net/ -d C:\\Projects -l debug -p mac\n\n\n\n\n\n\nYou'll need to download and install \nXcode\n\n\n\n\n\n\nThen, you can follow the\n Submitting Your App to the Store\n steps in the Apple's App Distribution Guide.",
            "title": "How to package mac"
        },
        {
            "location": "/tools/how-to-package-mac/#how-to-package-macos",
            "text": "MacOS is supported in the  macOS platform module  for pwabuilder.   Make sure  pwabuilder  installed. If not, install using:    npm install -g pwabuilder   Add  macOS platform  by:   pwabuilder platform add mac pwabuilder-mac   Then, use pwabuilder to generate the polyfills:    pwabuilder https://btdj.azurewebsites.net/ -d C:\\Projects -l debug -p mac    You'll need to download and install  Xcode    Then, you can follow the  Submitting Your App to the Store  steps in the Apple's App Distribution Guide.",
            "title": "How to Package MacOS"
        },
        {
            "location": "/tools/how-to-package-windows7/",
            "text": "How to Package Windows7\n\n\nWindows 7 apps are supported in the \nWin32 platform module\n for pwabuilder.\n\n\n\n\nMake sure \npwabuilder\n installed. If not, install using: \n\n\n\n\nnpm install -g pwabuilder\n\n\n\n\nAdd \nwin32 platform\n by: \n\n\n\n\npwabuilder platform add win32 pwabuilder-win32\n\n\n\n\nThen, use pwabuilder to generate the polyfills:\n\n\n\n\npwabuilder https://btdj.azurewebsites.net/ -d C:\\Projects -l debug -p win32\n.",
            "title": "How to package windows7"
        },
        {
            "location": "/tools/how-to-package-windows7/#how-to-package-windows7",
            "text": "Windows 7 apps are supported in the  Win32 platform module  for pwabuilder.   Make sure  pwabuilder  installed. If not, install using:    npm install -g pwabuilder   Add  win32 platform  by:    pwabuilder platform add win32 pwabuilder-win32   Then, use pwabuilder to generate the polyfills:   pwabuilder https://btdj.azurewebsites.net/ -d C:\\Projects -l debug -p win32 .",
            "title": "How to Package Windows7"
        },
        {
            "location": "/tools/",
            "text": "",
            "title": "Home"
        },
        {
            "location": "/whatPWA/pwa-min-requirements/",
            "text": "PWA Minimum Requirements\n\n\nIn order to build a Progressive Web App, the following minimum requirements should be met:\n\n Secure. A secure connection (HTTPS) over your site makes sure all traffic is as safe as a native app. A secure endpoint also allows the service worker to securely take action on the behalf of your app.\n\n Standard Manifest. The site should be controlled by a W3C manifest that determines the experience and behavior of your PWA. This includes everything from images, to language, to the start page of your web app.\n\n Network Independent. The Progressive Web App should have a mechanism (e.g. through a service worker) to help control traffic when the network isn't there or isn't reliable. The app should be able to work independent of network.\n\n Responsiveness. The site should be responsive on tablets & mobile devices.\n\n Cross-Browser. The site should work in multiple browsers (e.g. Chrome, Edge, Firefox and Safari).\n\n Deep Linking. Each page of the site should have an unique URL (individual pages are deep linkable via URLs e.g. to share on social media).\n\n\nThe quick start will provide the tools to address some of the above requirements, like building the W3C manifest and enabling network independence. However, it is responsibility of the site developer to fulfill the other requirements.",
            "title": "Pwa min requirements"
        },
        {
            "location": "/whatPWA/pwa-min-requirements/#pwa-minimum-requirements",
            "text": "In order to build a Progressive Web App, the following minimum requirements should be met:  Secure. A secure connection (HTTPS) over your site makes sure all traffic is as safe as a native app. A secure endpoint also allows the service worker to securely take action on the behalf of your app.  Standard Manifest. The site should be controlled by a W3C manifest that determines the experience and behavior of your PWA. This includes everything from images, to language, to the start page of your web app.  Network Independent. The Progressive Web App should have a mechanism (e.g. through a service worker) to help control traffic when the network isn't there or isn't reliable. The app should be able to work independent of network.  Responsiveness. The site should be responsive on tablets & mobile devices.  Cross-Browser. The site should work in multiple browsers (e.g. Chrome, Edge, Firefox and Safari).  Deep Linking. Each page of the site should have an unique URL (individual pages are deep linkable via URLs e.g. to share on social media).  The quick start will provide the tools to address some of the above requirements, like building the W3C manifest and enabling network independence. However, it is responsibility of the site developer to fulfill the other requirements.",
            "title": "PWA Minimum Requirements"
        },
        {
            "location": "/whatPWA/what-is-a-manifest/",
            "text": "What is a Manifest\n\n\nThe Manifest for Web Apps is a JSON-based manifest file that provides a centralized place to put metadata associated with a web application (like app name, icons, presentation, etc.), thus solving the problem of having to maintain an heterogeneous set of meta tags and link tags to support each platform. PWAs use this manifest to control the appearance and behavior of the app when it is installed and launched from the user device. For more details see the \nWeb App Manifest Specification\n.",
            "title": "What is a manifest"
        },
        {
            "location": "/whatPWA/what-is-a-manifest/#what-is-a-manifest",
            "text": "The Manifest for Web Apps is a JSON-based manifest file that provides a centralized place to put metadata associated with a web application (like app name, icons, presentation, etc.), thus solving the problem of having to maintain an heterogeneous set of meta tags and link tags to support each platform. PWAs use this manifest to control the appearance and behavior of the app when it is installed and launched from the user device. For more details see the  Web App Manifest Specification .",
            "title": "What is a Manifest"
        },
        {
            "location": "/whatPWA/what-is-a-service-worker/",
            "text": "What is a Service Worker\n\n\nService workers are scripts that your browser runs in the background and act as a network proxy in the web browser to manage the web/HTTP requests programmatically.\nService Workers lie between the network and device to supplement the content enabling the creation of effective offline experiences using the cache mechanisms. They will also allow access to push notifications and background sync APIs.",
            "title": "What is a service worker"
        },
        {
            "location": "/whatPWA/what-is-a-service-worker/#what-is-a-service-worker",
            "text": "Service workers are scripts that your browser runs in the background and act as a network proxy in the web browser to manage the web/HTTP requests programmatically.\nService Workers lie between the network and device to supplement the content enabling the creation of effective offline experiences using the cache mechanisms. They will also allow access to push notifications and background sync APIs.",
            "title": "What is a Service Worker"
        },
        {
            "location": "/whatPWA/whatIsAPWA/",
            "text": "What is a PWA\n\n\n\n\nPWA Minimum Requirements\n\n\nWhat is a Service Worker\n\n\nWhat is a Manifest",
            "title": "whatIsAPWA"
        },
        {
            "location": "/whatPWA/whatIsAPWA/#what-is-a-pwa",
            "text": "PWA Minimum Requirements  What is a Service Worker  What is a Manifest",
            "title": "What is a PWA"
        }
    ]
}